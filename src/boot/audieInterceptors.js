// import { eventHub } from '../../config.js'
import { Dialog } from "quasar"

export default (http, store, router) => {
  http.interceptors.request.use((config) => {
    // Do something before request is sent
    return store.dispatch("checkRefreshToken").then((token) => {
      config.headers.common.Authorization =  'Basic DB4AE36C-4A7F-4425-8748-C64E7DA1513E'
      // if (token) {
        // config.headers.common.Authorization = `Bearer ${token}`
      // }
      return config
    })
  })

  // https://github.com/mzabriskie/axios#interceptors
  http.interceptors.request.use(
    function(config) {
      // Do something before request is sent
      if (store.state.language != null) {
        config.headers["x-language"] = store.state.language
      } else {
        config.headers["x-language"] = "pt-br"
      }

      if (store.state.selected_station) {
        config.headers["X-StationId"] =
          store.state.selected_station.stationId || sessionStorage.stationId
      }

      return config
    },
    function(error) {
      // Do something with request error
      return Promise.reject(error)
    }
  )

  http.interceptors.response.use(
    (response) => {
      return response
    },
    /**
     * This is a central point to handle all
     * error messages generated by HTTP
     * requests
     */
    (error) => {
      const { response } = error
      console.log(response)

      if ([401].indexOf(response.status) > -1) {
        // store.dispatch('checkRefreshToken2');
        router.push({
          name: "requestAccessToken",
          query: { redirectUrl: window.location.href }
        })
        // store.dispatch(SEND_NOTIFY, {
        //   title: `Sessão`,
        //   message: 'Sua sessão expirou, por favor faça login novamente.',
        //   type: 'info'
        // });
      } else if ([403].indexOf(response.status) > -1) {
        router.push({ name: "stations" })
      } else if ([400].indexOf(response.status) > -1) {
        let message = ""
        if (response.data.hasOwnProperty("notifications")) {
          response.data.notifications.forEach((element) => {
            message = message + element.message + "<br/>"
          })
          // alert(message)
          Dialog.create({
            title: `Ops... Houve um problema!`,
            message:
              `
              <b>Algo ocorreu ao tentar processar sua ação. Veja abaixo detalhes do ocorrido:</b>
              <br/><br/>` + message,
            html: true,
            cancel: false,
            ok: {
              label: "Ok",
              "no-caps": true,
              color: "red-8"
            }
          })
        } else if (response.data.hasOwnProperty("errors")) {
          // alert(JSON.stringify(response))
          if (response.data.errors.hasOwnProperty("issueDate")) {
            Dialog.create({
              title: "Ops... Houve um problema!",
              message:
                `
                <b>Algo ocorreu ao tentar processar sua ação. Veja abaixo detalhes do ocorrido:</b>
                <br/><br/>` +
                "Data de Emissão: " +
                JSON.stringify(response.data.errors.issueDate),
              html: true,
              cancel: false,
              ok: {
                label: "Ok",
                "no-caps": true,
                color: "red-8"
              }
            })
          } else {
            Dialog.create({
              title: "Ops... Houve um problema!",
              message:
                `
                <b>Algo ocorreu ao tentar processar sua ação. Veja abaixo detalhes do ocorrido:</b>
                <br/><br/>` + JSON.stringify(response.data.errors),
              html: true,
              cancel: false,
              ok: {
                label: "Ok",
                "no-caps": true,
                color: "red-8"
              }
            })
          }
        } else {
          // alert(JSON.stringify(response))
          Dialog.create({
            title: "Ops... Houve um problema!",
            message:
              `
              <b>Algo ocorreu ao tentar processar sua ação. Veja abaixo detalhes do ocorrido:</b>
              <br/><br/>` + JSON.stringify(response),
            html: true,
            cancel: false,
            ok: {
              label: "Ok",
              "no-caps": true,
              color: "red-8"
            }
          })
        }
      } else if ([500].indexOf(response.status) > -1) {
        if (typeof response.data === "string") {
          if (response.data.includes("x-stationid precisa ser setado")) {
            router.push({ name: "stations" })
          }
        } else {
          Dialog.create({
            title: "Ops... Houve um problema!",
            message:
              `
              <b>Algo ocorreu ao tentar processar sua ação. Veja abaixo detalhes do ocorrido:</b>
              <br/><br/>` + JSON.stringify(response),
            html: true,
            cancel: false,
            ok: {
              label: "Ok",
              "no-caps": true,
              color: "red-8"
            }
          })
        }
      } else {
        // alert(JSON.stringify(response))
        Dialog.create({
          title: "Ops... Houve um problema!",
          message:
            `
            <b>Algo ocorreu ao tentar processar sua ação. Veja abaixo detalhes do ocorrido:</b>
            <br/><br/>` + JSON.stringify(response),
          html: true,
          cancel: false,
          ok: {
            label: "Ok",
            "no-caps": true,
            color: "red-8"
          }
        })
      }

      console.log(response.status)

      if (typeof response.data.push === "function") {
        // if (isArray(response.data)) {
        // store.dispatch('setMessage', { type: 'error', message: response.data.messages })
      } else {
        // store.dispatch('setMessage', { type: 'validation', message: response.data })
      }
      // store.dispatch('setFetching', { fetching: false })
      return Promise.reject(error)
    }
  )
}
